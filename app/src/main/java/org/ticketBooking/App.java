/*
 * This source file was generated by the Gradle 'init' task
 */
package org.ticketBooking;

import org.ticketBooking.entities.Train;
import org.ticketBooking.entities.User;
import org.ticketBooking.services.UserBookingService;
import org.ticketBooking.util.*;

import java.io.IOException;
import java.util.*;

public class App {
    public static final String ANSI_GREEN="\u001B[32m";
    public static final String ANSI_RED="\u001B[31m";
    public static final String ANSI_WHITE_BACKGROUND="\u001B[47m";
    public static final String ANSI_RESET="\u001B[0m";
    public static void main(String[] args) throws IOException {
        System.out.println("Train Booking System Running.......");
        int option;
        int trainOption;
        Train selectedTrain = null;
        String source="", destination="";
        UserBookingService userBookingService;
        Hash hash=new Hash();
        try {
            userBookingService=new UserBookingService();
        }
        catch(Exception e) {
            System.out.println("Error in UserBookingService");
            e.printStackTrace();
            return;
        }
        Scanner sc=new Scanner(System.in);
        while(true){
            System.out.println("Menu");
            System.out.println("1. Sign Up");
            System.out.println("2. Login");
            System.out.println("3. Fetch Booking Details");
            System.out.println("4. Search Trains");
            System.out.println("5. Book a Seat");
            System.out.println("6. Cancel Booking");
            System.out.println("7. Exit");
            option=sc.nextInt();
            switch (option){
                case 1:
                    System.out.println("Enter your Name:");
                    String name=sc.next();
                    System.out.println("Enter your Email:");
                    String email=sc.next();
                    System.out.println("Enter your Phone No.:");
                    String phone=sc.next();
                    System.out.println("Enter your Address:");
                    String address=sc.next();
                    sc.nextLine();
                    System.out.println("Set Password:");
                    String password= sc.nextLine();
                    password=hash.hashPassword(password);
                    String userID = UUID.randomUUID().toString();
                    User user = new User(name, userID, email, password, phone, address, new ArrayList<>());
                    userBookingService.signUp(user);
                    break;
                case 2:
                    System.out.println("Enter your email:");
                    String email1=sc.next();
                    System.out.println("Enter your Password:");
                    String password1=sc.next();
                    boolean login=userBookingService.login(email1, password1);
                    if(!login){
                        System.out.println("Incorrect Username or Password");
                    }
                    else {
                        System.out.println("Login Successful");
                    }
                    break;
                case 3:
                    if(userBookingService.LoginSuccess()) {
                        System.out.println("Fetching Booking Details......");
                        userBookingService.fetchBooking();
                    }
                    else {
                        System.out.println("Login to use the service");
                    }
                    break;
                case 4:
                    if(userBookingService.LoginSuccess()) {
                        sc.nextLine();
                        System.out.println("Enter source station(From):");
                        source = sc.nextLine();
                        System.out.println("Enter destination station(To):");
                        destination = sc.nextLine();
                        List<Train> trains = userBookingService.getTrains(source, destination);
                        trains.stream().sorted(Comparator.comparing(Train::getDate).reversed());
                        if (!trains.isEmpty()) {
                            int i = 1;
                            for (Train train : trains) {
                                System.out.println(i + " Train ID: " + train.getTrainID() + "\nTrain Name: " + train.getTrainName()+"\nDate: "+train.getDate());
                                for (Map.Entry<String, String> entry : train.getStationTimes().entrySet()) {
                                    System.out.println("Station: " + entry.getKey() + "\tArrival Time: " + entry.getValue());
                                    if(entry.getKey().equals(destination)){
                                        break;
                                    }
                                }
                                i++;
                            }
                            System.out.println("Select a Train");
                            trainOption = sc.nextInt()-1;
                            selectedTrain = trains.get(trainOption);
                        }
                    }
                    else {
                        System.out.println("Login to use the service");
                    }
                    break;
                case 5:
                    if(userBookingService.LoginSuccess()) {
                        System.out.println("Select a Seat from below given seats");
                        System.out.println(ANSI_WHITE_BACKGROUND);
                        assert selectedTrain != null;
                        List<List<Boolean>> seats = userBookingService.fetchSeats(selectedTrain);
                        for (List<Boolean> row : seats) {
                            for (Boolean b : row) {
                                if (!b) {
                                    System.out.print(ANSI_GREEN + "A ");
                                } else {
                                    System.out.print(ANSI_RED + "B ");
                                }
                            }
                            System.out.println();
                        }
                        System.out.print(ANSI_RESET);
                        System.out.println(ANSI_GREEN + "A" + ANSI_RESET + ": Available\n" + ANSI_RED + "B" + ANSI_RESET + ": Unavailable");
                        System.out.println("Enter the row no you want to book");
                        int rowNo = sc.nextInt();
                        System.out.println("Enter the seat no you want to book in the row "+rowNo);
                        rowNo-=1;
                        int seatNo = sc.nextInt()-1;
                        boolean book=userBookingService.bookSeat(selectedTrain, source, destination, rowNo, seatNo);
                        if(book) {
                            System.out.println("Booking Successful");
                        }
                        else {
                            System.out.println("Booking not Successful");
                        }
                    }
                    else  {
                        System.out.println("Login to use the service");
                    }
                    break;
                case 6:
                    System.out.println("Enter your Ticket ID you want to cancel:");
                    String ticketID = sc.next();
                    boolean cancel=userBookingService.cancelBooking(ticketID);
                    if (cancel) {
                        System.out.println("Cancel Successful");
                    }
                    else {
                        System.out.println("Cancel not Successful");
                    }
                    break;
                case 7:
                    System.out.println("Exiting Train Booking System");
                    System.exit(0);
                default:
                    System.out.println("Invalid Option");
            }
        }
    }
}
